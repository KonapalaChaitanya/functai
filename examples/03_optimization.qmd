---
title: "FunctAI: Optimization with DSPy"
format:
  html:
    code-fold: true
---

This example shows how to compile a `@magic` function with a DSPy optimizer (e.g., BootstrapFewShot).

Prereqs:

- Install this repo (e.g., `uv pip install -e .`)
- Set your provider API key (e.g., `export OPENAI_API_KEY=...`)

```python
from functai import magic, optimize

@magic(adapter="json", lm="gpt-4.1")
def classify(text: str) -> str:
    """Return 'positive' or 'negative'."""
    ...

# A tiny trainset of (input, output) examples
trainset = [
    ("I love it", "positive"),
    ("Terrible experience", "negative"),
]

compiled_classify = optimize(classify, trainset=trainset)

print("Before:", classify("This is great"))
print("After:", compiled_classify("This is great"))
```

Notes:

- `optimize(...)` preserves the function's adapter and LM settings.
- The optimizer may attach demos to the underlying module; you can preview them with `format_prompt` or inspect via `inspect_history_text()` after a call.

